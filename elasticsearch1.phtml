<?
use XT\Core\System\KeyView;
use XT\Core\Common\Common;
/**
 * @var PhpRenderer $this
 */
$index_article = Common::sendevent(KeyView::DYNAMIC_LOAD_PHTML,
    ['file'=>'module/Application/view/dynamiccontent/Swift.php', 'view'=>$this])->last();

$nav = $index_article->renderlist();

Common::eventValue(KeyView::startNav(), $nav);

$index_article = [
    ['Elasticsearch' , 'Elasticsearch là gì'],
    ['Khainiem' , 'Một vài khái niệm Elasticsearch'],
    ['Caidat' , 'Cài đặt Elasticsearch / Kibana'],




];

?>
<?=Common::createULlink($index_article, '#', 'class="list-group list-group-flush"', 'class="list-group-item p-0"'); ?>



    <a id="<?=$index_article[0][0]?>" name="<?=$index_article[0][0]?>"></a>
    <h2 class="text-danger display-4 font30">Elasticsearch là gì</h2>
<p><strong>Elasticsearch</strong> (trang chủ <a href="https://www.elastic.co/" target="_blank">Elasticsearch</a>) phát hành năm 2010, là phần mềm miễn phí, nguồn mở viết bằng ngôn ngữ <code>Java</code>, nó có chức năng như như là công cụ tìm kiếm và phân tích phân tán (máy chủ ở nhiều nơi). Elasticsearch được xây dựng dựa trên
    <a href="https://lucene.apache.org/" target="_blank">Apache Lucene</a>, Elasticsearch trở thành công cụ tìm kiếm  (search engine) thông dụng nhất và được sử dụng rộng rãi cho các công việc liên quan đến chỉ mục và tìm kiếm tài liệu, phân tích dữ liệu ...</p>
    <img src="https://images.contentstack.io/v3/assets/bltefdd0b53724fa2ce/blt280217a63b82a734/5bbdaacf63ed239936a7dd56/elastic-logo.svg"
         alt="es">
<p>Với các ưu điểm như:  khả năng phân tích, tìm kiếm dữ liệu nhanh chóng, hỗ trợ tìm kiếm mờ, dễ dàng tạo ra các truy vấn phức tạp, cung cấp sẵn thư viện client cho nhiều ngôn ngữ (<a
            href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank">Elasticsearch Clients</a>) như Java, Php ... Elasticsearch được sử dụng bởi nhiều công ty lớn như Facebook, GitHub, Wikimedia ...</p>
<p class="alert alert-danger">Ứng dụng web của bạn với nhiều dữ liệu, bạn có thể tận dụng khả năng của Elasticsearch để cung cấp chức năng tìm kiếm bài viết, sản phẩm ...  một cách chuyên nghiệp và nhanh chóng!</p>


    <a id="<?=$index_article[1][0]?>" name="<?=$index_article[1][0]?>"></a>
    <h2 class="text-danger display-4 font30">Một vài khái niệm và cơ chế hoạt động</h2>
<p>Khi đã cài đặt được một hệ thống Elasticsearch (có thể chỉ là một server hay nhiều server phân tán), thì tương tác với nó thông qua cơ chế <code>RESTful</code>, nghĩa là từ client tạo ra các HTTP Request (GET, PUT ...) kèm dữ liệu dạng JSON để tương tác với Elasticsearch (tạo, xóa cập nhật dữ liệu, truy vấn tìm kiếm ...).</p>
<p>Để tạo ra HTTP Request gửi đến Elasticsearch bạn có thể sử dụng bất kỳ ngôn ngữ yêu thích nào, ở phần này để không phụ thuộc ngôn ngữ nào sẽ trình bày việc tạo các HTTP Request kèm dữ liệu JSON bằng cách sử dụng <code>CURL</code>, sau đó có thể có một vài bài viết sử dụng PHP, C#, Java để tương tác với Elasticsearch</p>
<p>Trước khi vào thực hành, có thể lướt qua một số khái niệm sau:</p>
<p><strong class="text-primary">cluster</strong> là các server (nodes) - Elasticsearch kết nối với nhau để lưu giữ dữ liệu và cung cấp chức năng đánh chỉ mục, tìm kiếm dữ liệu trên các server đó. Một <code>cluster</code> xác định bởi tên duy nhất <i>(mặc định tên là <code>elasticsearch</code>)</i>. Bạn cũng lưu ý, dù bạn chỉ tạo ra hệ thống với 1 server (node) thì vẫn có một <code>cluster</code>, sau này có thể nối nhiều server phân tán vào <code>cluster</code> để mở rộng khả năng của hệ thống mà ở đó một node (server) có thể có một chức năng riêng như (master node, data, client...).</p>
<p><strong class="text-primary">node</strong> đó là một server tham ra tạo thành <code>cluster</code>, nó có vai trò lưu dữ liệu, đánh chỉ mục và cung cấp khả năng tìm kiếm. Một node cũng cần xác định một cái tên, mặc định một tên duy nhất (<code>UUID</code>) được sinh ra cho nó khi nó chạy trừ khi bạn gán cho nó một cái tên cụ thể. Mặc định mỗi node cần thiết lập nối vào một cluster đã đặt tên (mặc định là <code>elasticsearch</code>), có nghĩa là khi node hoạt động nó sẽ khám phá mạng tìm đến cluster với tên chỉ định để nối vào. Nếu như bạn chạy một server (node) mà mạng của bạn chưa có một cluster nào với tên chỉ ra, thì node này sẽ tự động là một cluster với tên mặc định <code>elasticsearch</code></p>
<p><strong class="text-primary">index</strong> là một tập hợp các tài liệu (document), những tài liệu này có một số tên thuộc tính tính chất chung. Thường mỗi <code>index</code> là một loại dữ liệu nào đó của bạn ví dụ như index chữa các sản phẩm, index chứa các đơn hàng, index chứa các bài viết ... Mỗi index được đặt một cái tên (<code>nhớ là chữ thường</code>), tên này dùng để thi hành các chức năng như đánh chỉ mục, tìm kiếm, cập nhật ... cho các dữ liệu (document) trong nó. Mỗi node có thể tạo nhiều index</p>

 <p><strong class="text-primary">Document</strong> là đơn vị thông tin lưu trong index (giống như dòng lưu trong bảng), đơn vị thông tin này biểu diễn bằng JSON (JavaScript Object Notation), qua đó nó lưu loại dữ liệu của bạn như sản phẩm, bài viết, đơn hàng ... Một index lưu bao nhiêu Document cũng được.</p>

    <p><strong class="text-primary">Shard</strong> Để giải quyết các vấn đề hiệu năng khi lưu trữ dữ liệu lớn bị giới hạn bởi phần cứng ES cung cấp khả năng chia một index ra thành từng mảnh nhỏ hơn - mỗi mảnh nhỏ đó gọi là <code>shard</code>. Khi tạo ra index, bạn có thể chia nó ra thành bao nhiêu shard tùy bạn. Một shard đó vẫn có đầy đủ chức năng như index nhưng độc lập với index, vào có thể lưu ở các node khác nhau. Shard nó giúp giải quết vấn đề hiệu năng tốc độ, tìm kiếm song song trên nhiều node phân tán. Ngoài ra bạn cũng có khái niệm <code>replica</code> đó là một bản backup, copy của <code>shard</code> để ES có thể phục hồi nếu một shard nào đó bị chết. </p>

    <a id="<?=$index_article[2][0]?>" name="<?=$index_article[2][0]?>"></a>
    <h2 class="text-danger display-4 font30">Cài đặt Elasticsearch và công cụ Kibana</h2>
<p><code>Elasticsearch</code> có thể tải về, cài đặt trực tiếp trên hệ thống máy của bạn với hướng dẫn đơn giản tại <a
            href="https://www.elastic.co/downloads/elasticsearch" target="_blank">Elasticsearch</a>, ở bài này sẽ cài đặt và chạy Elasticsearch bằng Docker (bạn có thể xem cách <strong><a
                href="https://xuanthulab.net/docker/" target="_blank">dùng Docker</a></strong> nếu bạn chưa biết.)</p>
<p>Mặc định <code>Elasticsearch</code> lắng nghe các yêu cầu HTTP gửi đến ở cổng <code>9200</code>, có nghĩa bạn sẽ tương tác với nó ở địa chỉ <code>http://localhost:9200</code>, vào gửi đi các HTTPD Request có thể thực hiện bằng lệnh <code>CURL</code> nên nếu hệ thống chưa có lệnh này bạn cần cài đặt vào trước để thực hành (Linux, macOS có thể đã có sẵn curl, Windows cần cài thêm). Ngoài ra bạn cũng có thể sử dụng các công cụ như <code>Postman</code> trực quan hơn, hoặc sử dụng thẳng thư viện theo ngôn ngữ lập trình của bạn (<a
            href="https://www.elastic.co/guide/en/elasticsearch/client/index.html" target="_blank">Elasticsearch Clients</a>) ...</p>
<p>Một công cụ quản lý, giám sát tương tác với Elasticsearch một cách trực quan qua môi trường web (truy cập bằng trình duyệt) đó là
    <a href="https://www.elastic.co/products/kibana" target="_blank">Kibana</a>, dưới đây cũng sẽ cài đặt công cụ này bằng Docker cùng với ES.</p>

<p>Sau đây là file <code>docker-compose.yml</code> với nội dung tạo ra container Docker chạy Elasticsearch và Kibana với mục tiêu như sau:</p>
<ul>
    <li><code>Elasticsearch</code> (elasticsearch:7.0.1) lắng nghe ở cổng <code>9200</code>, một node tên là <code>elasticsearch</code> và khởi tạo là master node, đặt tên <span>cluster</span> là <code>datasearch</code></li>
    <li>Nơi lưu dữ liệu của node là ổ đĩa ánh xạ thư mục <code>/Users/xuanthulab/Desktop/xdata/docker/elasticsearch/data</code> (bạn thay bằng thư mục máy host Docker của bạn).</li>
    <li>Container chạy <code>kibana</code> (kibana:7.0.1) lắng nghe ở cổng <code>5601</code></li>
</ul>
<code>docker-compose.yml</code>
<pre class="prettyprint lang-yml">
version: '3'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.0.1
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=datasearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.initial_master_nodes=elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.0.1
    ports:
      - "5601:5601"

volumes:
  esdata:
    driver_opts:
      device: /Users/xuanthulab/Desktop/xdata/docker/elasticsearch/data
      o: bind
</pre>

<p>Với file docker-compose.yml này, chạy Docker (xem thêm <a
            href="https://xuanthulab.net/lenh-docker-compose-tao-va-chay-cac-dich-vu-docker.html" target="_blank">Sử dụng Docker-compose</a>)vào thư mục lưu file này và gõ lệnh để chạy các dịch vụ trên:</p>
<pre class="p-2">docker-compose up</pre>
<p>Sau lệnh này nó sẽ tải các image docker tương ứng về và khởi chạy 2 dịch vụ là <code>Elasticsearch</code> (http://localhost:9200) và <code>Kibana</code> (http://localhost:5601)</p>
<p>Và như vậy đã có ES để thực hành.</p>
<p>Hãy vào phần <a href="">Sử dụng ElasticSearch cơ bản</a> để thực hiện các tương tác đầu tiên!</p>

<?
echo\XT\Core\Common\Common::createBottomIndex($index_article);
?>